#+TITLE: Docker Networking
#+AUTHOR: chodkows

* Basics
-d detached
-p port host:docker

#+begin_src bash
docker run -p 80:80 -d httpd
#+end_src

#+RESULTS:
: 70880cadc34854038ee4d5ef47ee98505e34febc244db8ff6b7bbc9880f67ff7

#+begin_src bash
curl http://localhost
#+end_src

#+RESULTS:
: <html><body><h1>It works!</h1></body></html>

#+begin_src bash :results scalar
docker inspect 708 | jq .[].NetworkSettings.Networks
#+end_src

#+RESULTS:
#+begin_example
{
  "bridge": {
    "IPAMConfig": null,
    "Links": null,
    "Aliases": null,
    "NetworkID": "ccbb1f10ad2925749a998115b6e12bb29aff8d18b431e2546b1a433cae4bb545",
    "EndpointID": "ad3f201972e00d6e5b143f07c516b551020d8af0d81ba5c0db232613b4605d97",
    "Gateway": "172.17.0.1",
    "IPAddress": "172.17.0.2",
    "IPPrefixLen": 16,
    "IPv6Gateway": "",
    "GlobalIPv6Address": "",
    "GlobalIPv6PrefixLen": 0,
    "MacAddress": "02:42:ac:11:00:02",
    "DriverOpts": null
  }
}
#+end_example

#+begin_src bash
curl http://172.17.0.2
#+end_src

#+RESULTS:
: <html><body><h1>It works!</h1></body></html>

* Networked httpd image
#+begin_src bash :results scalar
cat << EOF | docker build -t nhttpd -
FROM httpd
RUN apt-get update
RUN apt-get install -y iputils-ping
RUN apt-get install -y inetutils-traceroute
RUN apt-get install -y iproute2
RUN apt-get install -y curl telnet dnsutils vim
EOF
#+end_src

* Create container based on nhttpd
#+begin_src bash :results scalar
docker container ls
#+end_src

#+RESULTS:
: CONTAINER ID   IMAGE                  COMMAND                  CREATED        STATUS          PORTS                       NAMES
: fe3fd40eb024   nhttpd                 "httpd-foreground"       6 hours ago    Up 19 seconds   80/tcp                      s2
: 5a5c94cab665   nhttpd                 "httpd-foreground"       6 hours ago    Up 19 seconds   80/tcp                      s1
: c86fbdc18b19   kindest/node:v1.24.0   "/usr/local/bin/entrâ€¦"   4 months ago   Up 2 hours      127.0.0.1:36953->6443/tcp   kind-control-plane


#+RESULTS:
: s1
: s2

#+begin_src bash :results scalar
docker container run --name s1 -d nhttpd
docker container run --name s2 -d nhttpd
#+end_src

#+begin_src bash :results scalar
docker container stop s1
docker container stop s2
#+end_src
#+begin_src bash :results scalar
docker container start s1
docker container start s2
#+end_src

#+RESULTS:
: s1
: s2

* Inspecting network settings of containers
#+begin_src bash :results scalar
docker inspect fe3 | jq .[].NetworkSettings.Networks
docker inspect 5a5 | jq .[].NetworkSettings.Networks
#+end_src

#+RESULTS:
#+begin_example
{
  "bridge": {
    "IPAMConfig": null,
    "Links": null,
    "Aliases": null,
    "NetworkID": "ccbb1f10ad2925749a998115b6e12bb29aff8d18b431e2546b1a433cae4bb545",
    "EndpointID": "",
    "Gateway": "",
    "IPAddress": "",
    "IPPrefixLen": 0,
    "IPv6Gateway": "",
    "GlobalIPv6Address": "",
    "GlobalIPv6PrefixLen": 0,
    "MacAddress": "",
    "DriverOpts": null
  }
}
{
  "bridge": {
    "IPAMConfig": null,
    "Links": null,
    "Aliases": null,
    "NetworkID": "ccbb1f10ad2925749a998115b6e12bb29aff8d18b431e2546b1a433cae4bb545",
    "EndpointID": "",
    "Gateway": "",
    "IPAddress": "",
    "IPPrefixLen": 0,
    "IPv6Gateway": "",
    "GlobalIPv6Address": "",
    "GlobalIPv6PrefixLen": 0,
    "MacAddress": "",
    "DriverOpts": null
  }
}
#+end_example

* Inspecting bridge network
#+begin_src bash :results scalar
docker network ls
docker network inspect bridge
#+end_src

#+RESULTS:
#+begin_example
NETWORK ID     NAME      DRIVER    SCOPE
cec04a7282b3   bridge    bridge    local
a5def40ddf4e   host      host      local
78237fab3986   kind      bridge    local
7818f12e84e3   none      null      local
[
    {
        "Name": "bridge",
        "Id": "cec04a7282b3add92bb3be1053ff0a812687571a703edb97ecbe5aaff1d4fad2",
        "Created": "2022-10-23T13:19:21.02804995+02:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.17.0.0/16",
                    "Gateway": "172.17.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {},
        "Options": {
            "com.docker.network.bridge.default_bridge": "true",
            "com.docker.network.bridge.enable_icc": "true",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "1500"
        },
        "Labels": {}
    }
]
#+end_example

* Checking connectivity from inside containers

In emacs ctrl+x ctrl+f /docker:<containerId>

#+begin_src
docker exec -it s1 bash
ping goole.com
hostname
hostname -i
ping s1
ping s2
#+end_src

In default bridge network there is no connectivity between containers

* Create own network
#+begin_src bash
docker network create backend --subnet 10.0.0.0/24
#+end_src

#+RESULTS:
: 419955c38542029c7a0f10882aea442746e5afeb8292429556faa2910ea03841
#+begin_src bash :results scalar
docker network inspect 4199
#+end_src

#+RESULTS:
#+begin_example
[
    {
        "Name": "backend",
        "Id": "419955c38542029c7a0f10882aea442746e5afeb8292429556faa2910ea03841",
        "Created": "2022-10-23T15:36:42.832873567+02:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "10.0.0.0/24"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "5a5c94cab665c99290fb2cf40d129a3096e25634688c3ce098e7be4f35d141f4": {
                "Name": "s1",
                "EndpointID": "4b1da92bee91cc124d39e915cd5117b8fff28992fb301b9547980c7df19dd2ad",
                "MacAddress": "02:42:0a:00:00:02",
                "IPv4Address": "10.0.0.2/24",
                "IPv6Address": ""
            },
            "fe3fd40eb024458acb14b71a890e6274df80fe648ad5aee10c73fddec41e4728": {
                "Name": "s2",
                "EndpointID": "79b2309ef13f1673c1b75f58b70de38dfdb53896e79e557f3a6828b0f76362c0",
                "MacAddress": "02:42:0a:00:00:03",
                "IPv4Address": "10.0.0.3/24",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]
#+end_example
* Add services to network
#+begin_src bash :results scalar
docker network connect backend s1
docker network connect backend s2
#+end_src

#+RESULTS:

#+begin_src bash :results scalar
docker container inspect s1 | jq .[].NetworkSettings.Networks
docker container inspect s2 | jq .[].NetworkSettings.Networks
#+end_src

#+RESULTS:
#+begin_example
{
  "backend": {
    "IPAMConfig": {},
    "Links": null,
    "Aliases": [
      "5a5c94cab665"
    ],
    "NetworkID": "419955c38542029c7a0f10882aea442746e5afeb8292429556faa2910ea03841",
    "EndpointID": "4b1da92bee91cc124d39e915cd5117b8fff28992fb301b9547980c7df19dd2ad",
    "Gateway": "10.0.0.1",
    "IPAddress": "10.0.0.2",
    "IPPrefixLen": 24,
    "IPv6Gateway": "",
    "GlobalIPv6Address": "",
    "GlobalIPv6PrefixLen": 0,
    "MacAddress": "02:42:0a:00:00:02",
    "DriverOpts": {}
  },
  "bridge": {
    "IPAMConfig": null,
    "Links": null,
    "Aliases": null,
    "NetworkID": "cec04a7282b3add92bb3be1053ff0a812687571a703edb97ecbe5aaff1d4fad2",
    "EndpointID": "7ea2d0be435b48924bf7c13f0b9923d3460ee25ec4ed25f530051ae09e0c5a3b",
    "Gateway": "172.17.0.1",
    "IPAddress": "172.17.0.2",
    "IPPrefixLen": 16,
    "IPv6Gateway": "",
    "GlobalIPv6Address": "",
    "GlobalIPv6PrefixLen": 0,
    "MacAddress": "02:42:ac:11:00:02",
    "DriverOpts": null
  }
}
{
  "backend": {
    "IPAMConfig": {},
    "Links": null,
    "Aliases": [
      "fe3fd40eb024"
    ],
    "NetworkID": "419955c38542029c7a0f10882aea442746e5afeb8292429556faa2910ea03841",
    "EndpointID": "79b2309ef13f1673c1b75f58b70de38dfdb53896e79e557f3a6828b0f76362c0",
    "Gateway": "10.0.0.1",
    "IPAddress": "10.0.0.3",
    "IPPrefixLen": 24,
    "IPv6Gateway": "",
    "GlobalIPv6Address": "",
    "GlobalIPv6PrefixLen": 0,
    "MacAddress": "02:42:0a:00:00:03",
    "DriverOpts": {}
  },
  "bridge": {
    "IPAMConfig": null,
    "Links": null,
    "Aliases": null,
    "NetworkID": "cec04a7282b3add92bb3be1053ff0a812687571a703edb97ecbe5aaff1d4fad2",
    "EndpointID": "d0d1c6a5ed50204b644826436e1749babce8833700be381aedf197b8efc5fb77",
    "Gateway": "172.17.0.1",
    "IPAddress": "172.17.0.3",
    "IPPrefixLen": 16,
    "IPv6Gateway": "",
    "GlobalIPv6Address": "",
    "GlobalIPv6PrefixLen": 0,
    "MacAddress": "02:42:ac:11:00:03",
    "DriverOpts": null
  }
}
#+end_example

* Disconnect services from default bridge network
For disabling public internet need to add --internal flag
#+begin_src bash
docker network disconnect bridge s1
docker network disconnect bridge s2
#+end_src

#+RESULTS:

#+begin_src bash :results scalar
docker container inspect s1 | jq .[].NetworkSettings.Networks
docker container inspect s2 | jq .[].NetworkSettings.Networks
#+end_src

#+RESULTS:
#+begin_example
{
  "backend": {
    "IPAMConfig": {},
    "Links": null,
    "Aliases": [
      "5a5c94cab665"
    ],
    "NetworkID": "419955c38542029c7a0f10882aea442746e5afeb8292429556faa2910ea03841",
    "EndpointID": "4b1da92bee91cc124d39e915cd5117b8fff28992fb301b9547980c7df19dd2ad",
    "Gateway": "10.0.0.1",
    "IPAddress": "10.0.0.2",
    "IPPrefixLen": 24,
    "IPv6Gateway": "",
    "GlobalIPv6Address": "",
    "GlobalIPv6PrefixLen": 0,
    "MacAddress": "02:42:0a:00:00:02",
    "DriverOpts": {}
  }
}
{
  "backend": {
    "IPAMConfig": {},
    "Links": null,
    "Aliases": [
      "fe3fd40eb024"
    ],
    "NetworkID": "419955c38542029c7a0f10882aea442746e5afeb8292429556faa2910ea03841",
    "EndpointID": "79b2309ef13f1673c1b75f58b70de38dfdb53896e79e557f3a6828b0f76362c0",
    "Gateway": "10.0.0.1",
    "IPAddress": "10.0.0.3",
    "IPPrefixLen": 24,
    "IPv6Gateway": "",
    "GlobalIPv6Address": "",
    "GlobalIPv6PrefixLen": 0,
    "MacAddress": "02:42:0a:00:00:03",
    "DriverOpts": {}
  }
}
#+end_example

* Create second network
#+begin_src bash
docker network create frontend --subnet 10.0.1.0/24
#+end_src

#+RESULTS:
: 5f5638bac04f50003cfe23cf7cd3ed2d2d27d8b3335272863b498990f0a459e0

* Change network for s2 service
#+begin_src bash :results scalar
docker network disconnect backend s2
docker network connect frontend s2
#+end_src

#+RESULTS:
#+begin_src bash :results scalar
docker network inspect backend
docker network inspect frontend
#+end_src

#+RESULTS:
#+begin_example
[
    {
        "Name": "backend",
        "Id": "419955c38542029c7a0f10882aea442746e5afeb8292429556faa2910ea03841",
        "Created": "2022-10-23T15:36:42.832873567+02:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "10.0.0.0/24"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "5a5c94cab665c99290fb2cf40d129a3096e25634688c3ce098e7be4f35d141f4": {
                "Name": "s1",
                "EndpointID": "4b1da92bee91cc124d39e915cd5117b8fff28992fb301b9547980c7df19dd2ad",
                "MacAddress": "02:42:0a:00:00:02",
                "IPv4Address": "10.0.0.2/24",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]
[
    {
        "Name": "frontend",
        "Id": "5f5638bac04f50003cfe23cf7cd3ed2d2d27d8b3335272863b498990f0a459e0",
        "Created": "2022-10-23T15:59:38.849144811+02:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "10.0.1.0/24"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "fe3fd40eb024458acb14b71a890e6274df80fe648ad5aee10c73fddec41e4728": {
                "Name": "s2",
                "EndpointID": "27bc26c72684c8f4b4d46f56289d24cc6f32413a9b0b5d3f342795e9d94d6378",
                "MacAddress": "02:42:0a:00:01:02",
                "IPv4Address": "10.0.1.2/24",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]
#+end_example
* Create a router(gateway)
#+begin_src bash :results scalar
docker run --name gw --network backend -d nhttpd
docker network connect frontend gw
#+end_src

#+RESULTS:
: 4cf06c0fa78b64a4f425933c262a98ba0f28a19cc3c5f0bab865789bdbb32bd4

There is need to restart containers s1 and s2 and add flag --cap-add=NET_ADMIN
#+begin_src bash
docker stop s1
docker stop s2
docker rm s1 s2
#+end_src

#+RESULTS:
| s1 |
| s2 |
| s1 |
| s2 |

* Add NET_ADMIN capability
#+begin_src bash
docker run --name s1 --network backend --cap-add=NET_ADMIN -d nhttpd
docker run --name s2 --network frontend --cap-add=NET_ADMIN -d nhttpd
#+end_src

#+begin_src bash :results scalar
docker container ls
#+end_src
#+RESULTS:
: CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS          PORTS                       NAMES
: f68217a3cbb2   nhttpd                 "httpd-foreground"       49 seconds ago   Up 48 seconds   80/tcp                      s2
: 74a6bc699cfe   nhttpd                 "httpd-foreground"       50 seconds ago   Up 48 seconds   80/tcp                      s1
: 4cf06c0fa78b   nhttpd                 "httpd-foreground"       15 minutes ago   Up 15 minutes   80/tcp                      gw
: c86fbdc18b19   kindest/node:v1.24.0   "/usr/local/bin/entrâ€¦"   4 months ago     Up 3 hours      127.0.0.1:36953->6443/tcp   kind-control-plane

* Add routing via gateway(gw container)
#+begin_src bash :dir /docker:74a6bc699cfe:/tmp :results scalar
hostname
hostname -i
nslookup gw
#+end_src

#+RESULTS:
: 74a6bc699cfe
: 10.0.0.2
: Server:		127.0.0.11
: Address:	127.0.0.11#53
:
: Non-authoritative answer:
: Name:	gw
: Address: 10.0.0.3
:

#+begin_src bash :dir /docker:74a6bc699cfe:/tmp :results scalar
ip route add 10.0.1.0/24 via 10.0.0.3
#+end_src

#+RESULTS:

#+begin_src bash :dir /docker:f68217a3cbb2:/tmp :results scalar
hostname
hostname -i
nslookup gw
#+end_src

#+RESULTS:
: f68217a3cbb2
: 10.0.1.2
: Server:		127.0.0.11
: Address:	127.0.0.11#53
:
: Non-authoritative answer:
: Name:	gw
: Address: 10.0.1.3
:

#+begin_src bash :dir /docker:f68217a3cbb2:/tmp :results scalar
ip route add 10.0.0.0/24 via 10.0.1.3
#+end_src

#+RESULTS:

#+begin_src bash :dir /docker:f68217a3cbb2:/tmp :results scalar
ping -c 3 10.0.0.2
curl 10.0.0.2
traceroute 10.0.0.2
#+end_src

#+RESULTS:
#+begin_example
PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data.
64 bytes from 10.0.0.2: icmp_seq=1 ttl=63 time=0.074 ms
64 bytes from 10.0.0.2: icmp_seq=2 ttl=63 time=0.138 ms
64 bytes from 10.0.0.2: icmp_seq=3 ttl=63 time=0.130 ms

--- 10.0.0.2 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2021ms
rtt min/avg/max/mdev = 0.074/0.114/0.138/0.028 ms
<html><body><h1>It works!</h1></body></html>
traceroute to 10.0.0.2 (10.0.0.2), 64 hops max
  1   10.0.1.3  0.007ms  0.024ms  0.004ms
  2   10.0.0.2  0.004ms  0.004ms  0.004ms
#+end_example


#+begin_src bash :dir /docker:74a6bc699cfe:/tmp :results scalar
ping -c 3 10.0.1.2
curl 10.0.1.2
traceroute 10.0.1.2
#+end_src

#+RESULTS:
#+begin_example
PING 10.0.1.2 (10.0.1.2) 56(84) bytes of data.
64 bytes from 10.0.1.2: icmp_seq=1 ttl=63 time=0.074 ms
64 bytes from 10.0.1.2: icmp_seq=2 ttl=63 time=0.130 ms
64 bytes from 10.0.1.2: icmp_seq=3 ttl=63 time=0.128 ms

--- 10.0.1.2 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2038ms
rtt min/avg/max/mdev = 0.074/0.110/0.130/0.025 ms
<html><body><h1>It works!</h1></body></html>
traceroute to 10.0.1.2 (10.0.1.2), 64 hops max
  1   10.0.0.3  0.007ms  0.004ms  0.004ms
  2   10.0.1.2  0.004ms  0.004ms  0.004ms
#+end_example
